apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: function-patch-and-transform
spec:
  compositeTypeRef:
    apiVersion: example.crossplane.io/v1
    kind: XR
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: bucket
            base:
              apiVersion: s3.aws.upbound.io/v1beta1
              kind: Bucket
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.location"
                toFieldPath: "spec.forProvider.region"
                transforms:
                  - type: map
                    map:
                      EU: "eu-north-1"
                      US: "us-east-2"

    - step: render-templates
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: s3.aws.upbound.io/v1beta1
            kind: BucketACL
            metadata:
              annotations:
                {{ setResourceNameAnnotation "bucketACL" }}
            spec:
              forProvider:
                bucketSelector:
                  matchControllerRef: true
                region: {{ .desired.resources.bucket.resource.spec.forProvider.region }}

    - step: patch-and-transform-again
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: bucketACL # resource name matches the one from function-go-templating setResourceNameAnnotation above, no `base` specified
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.acl"
                toFieldPath: "spec.forProvider.acl"
